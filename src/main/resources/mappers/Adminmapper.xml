<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

	

<mapper namespace="com.example.DAO.MentorRepository">
	
	
<insert id="insertMentorApplication" parameterType="MentorVO">
  INSERT INTO mentor (
    user_id,
    student_course,
    experience_years,
    specialties,
    introduction,
    status
  )
  VALUES (
    #{userId},
    #{studentCourse},
    #{experienceYear},
    #{specialite},
    #{introduction},
    #{status}
  )
</insert>
	
	
  <!-- ✅ 전체 사용자 조회 -->
<select id="getAllUsers" resultType="MemberVO">
  SELECT DISTINCT
    m.user_id AS userId,
    m.login_id AS loginid,
    m.is_social AS isSocial,
    m.social_type AS socialType,
    m.social_id AS socialId,
    m.name,
    m.password_hash AS passwordhash,
    m.nickname,
    m.roles,
    m.national_id AS nationalid,
    m.phone_number AS phonenumber,
    m.email,
    m.is_banned AS isBanned,
    m.university,
    m.major,
    m.graduation_file AS graduationFile,
    m.created_at AS createdat
  FROM member m
  LEFT JOIN mentor mt ON m.user_id = mt.user_id
  WHERE m.roles != 'ROLE_MENTOR' OR (mt.status = 'APPROVED')
</select>


  <!-- ✅ 사용자 검색 (이름 또는 이메일) -->
  <select id="searchUsers" parameterType="String" resultType="MemberVO">
    SELECT * FROM member
    WHERE name LIKE CONCAT('%', #{keyword}, '%')
       OR login_id LIKE CONCAT('%', #{login_id}, '%')
  </select>

 <!-- ✅ 멘토 인증 요청 목록 -->
 <select id="getAllMentorApplications" resultType="MentorVO">
  SELECT
    m.user_id AS userId,
    m.name AS name,
    m.email AS email,
    m.graduation_file AS graduationFile,
    mt.specialties AS specialite,
    mt.experience_years AS experienceYear,
    mt.introduction AS introduction,
    mt.status AS status,
    mt.student_course AS studentCourse
  FROM mentor mt
  JOIN member m ON mt.user_id = m.user_id
  WHERE mt.status = 'PENDING'
</select>



<!-- ✅ 멘토 승인 -->
<update id="approveMentor" parameterType="int">
  UPDATE mentor SET status = 'APPROVED' WHERE user_id = #{userId};
</update>

<!-- ✅ 멘토 권한 철회 -->
<update id="revokeMentor" parameterType="int">
  UPDATE member m
  JOIN mentor mt ON m.user_id = mt.user_id
  SET m.roles = 'ROLE_MENTEE',
      mt.status = 'REVOKED'
  WHERE m.user_id = #{userId}
</update>

<!-- ✅ 멘토 거절 -->
<update id="denyMentor" parameterType="int">
  UPDATE mentor SET status = 'DENIED' WHERE user_id = #{userId};
</update>

	
	
  <!-- ✅ 블랙리스트 사용자 조회 -->
  <select id="getBlacklistedUsers" resultType="MemberVO">
    SELECT * FROM member WHERE is_banned = true
  </select>	
	

  <!-- ✅ 블랙리스트 등록 -->
  <update id="banUser" parameterType="int">
    UPDATE member SET is_banned = true WHERE user_id = #{userId};
  </update>

  <!-- ✅ 블랙리스트 해제 -->
  <update id="unbanUser" parameterType="int">
    UPDATE member SET is_banned = false WHERE user_id = #{userId};
  </update>


	<select id="getUserCount" resultType="int">
 		 SELECT COUNT(*) FROM member
	</select>
	
	
	<select id="getInactiveUserCount" resultType="int">
  SELECT COUNT(*) FROM member
  WHERE last_login IS NULL OR last_login &lt; NOW() - INTERVAL 2 DAY
</select>

</mapper>
