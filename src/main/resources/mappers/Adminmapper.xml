<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.DAO.MentorRepository">

  <!-- ✅ 멘토 신청 등록 -->
  <insert id="insertMentorApplication" parameterType="MentorVO">
    INSERT INTO mentor (
      user_id,
      student_course,
      experience_years,
      specialties,
      introduction,
      status,
      student_count,
      score
    )
    VALUES (
      #{userId},
      #{studentCourse},
      #{experienceYear},
      #{specialite},
      #{introduction},
      #{status},
      #{studentCount},
      #{score}
    )
  </insert>

  <!-- ✅ 전체 사용자 조회 -->
  <select id="getAllUsers" resultType="MemberVO">
    SELECT DISTINCT
      m.user_id AS userId,
      m.login_id AS loginid,
      m.is_social AS isSocial,
      m.social_type AS socialType,
      m.social_id AS socialId,
      m.name,
      m.password_hash AS passwordhash,
      m.nickname,
      m.roles,
     <!-- m.national_id AS nationalid,-->
      m.birthday,
      m.gender,
      m.phone_number AS phonenumber,
      m.email,
      m.is_banned AS isBanned,
      m.university,
      m.major,
      m.graduation_file AS graduationFile,
      m.created_at AS createdat,
      m.last_login AS lastLogin
    FROM member m
    LEFT JOIN mentor mt ON m.user_id = mt.user_id
    WHERE m.roles != 'ROLE_MENTOR' OR (mt.status = 'APPROVED')
  </select>

  <!-- ✅ 사용자 검색 (이름 또는 로그인 ID) -->
  <select id="searchUsers" parameterType="String" resultType="MemberVO">
    SELECT *
    FROM member
    WHERE name LIKE CONCAT('%', #{keyword}, '%')
       OR login_id LIKE CONCAT('%', #{keyword}, '%')
  </select>

  <!-- ✅ 멘토 인증 요청 목록 -->
  <select id="getAllMentorApplications" resultType="MentorVO">
    SELECT
      m.user_id AS userId,
      m.name AS name,
      m.email AS email,
      m.graduation_file AS graduationFile,
      mt.specialties AS specialite,
      mt.experience_years AS experienceYear,
      mt.introduction AS introduction,
      mt.status AS status,
      mt.student_course AS studentCourse,
      mt.student_count AS studentCount,
      mt.score AS score
    FROM mentor mt
    JOIN member m ON mt.user_id = m.user_id
    WHERE mt.status = 'PENDING'
  </select>

  <!-- ✅ 멘토 승인/거절/철회 -->
  <update id="approveMentor" parameterType="int">
    UPDATE mentor SET status = 'APPROVED' WHERE user_id = #{userId};
  </update>

  <update id="revokeMentor" parameterType="int">
    UPDATE member m
    JOIN mentor mt ON m.user_id = mt.user_id
    SET m.roles = 'ROLE_MENTEE',
        mt.status = 'REVOKED'
    WHERE m.user_id = #{userId}
  </update>

  <update id="denyMentor" parameterType="int">
    UPDATE mentor SET status = 'DENIED' WHERE user_id = #{userId};
  </update>

  <!-- ✅ 블랙리스트 관리 -->
  <select id="getBlacklistedUsers" resultType="MemberVO">
    SELECT * FROM member WHERE is_banned = true
  </select>

 <update id="banUser" parameterType="int">
  UPDATE member
  SET is_banned = true
  WHERE user_id = (
    SELECT target_user_id
    FROM report
    WHERE report_id = #{reportId}
  );
</update>

<update id="unbanUser" parameterType="int">
  UPDATE member
  SET is_banned = false
  WHERE user_id = (
    SELECT target_user_id
    FROM report
    WHERE report_id = #{reportId}
  );
</update>
<select id="getUserIdByLoginId" resultType="int" parameterType="String">
  SELECT user_id FROM member 
  WHERE LOWER(TRIM(login_id)) = LOWER(#{loginId})
</select>
  <!-- ✅ 사용자 통계 -->
  <select id="getUserCount" resultType="int">
    SELECT COUNT(*) FROM member
  </select>

  <select id="getInactiveUserCount" resultType="int">
    SELECT COUNT(*)
    FROM member
    WHERE last_login IS NULL OR last_login &lt; NOW() - INTERVAL 2 DAY
  </select>
  
  
  <insert id="insertChatMessage" parameterType="ChatMessage">
    INSERT INTO chat_message (
        chatroom_id,
        sender_id,
        content,
        timestamp,
        is_read
    ) VALUES (
        #{chatroomId},
        #{senderId},
        #{content},
        #{timestamp},
        #{isRead}
    )
</insert>

</mapper>
